import math
from pydoc import html
from typing import Optional

from aiogram import types, F, Router, flags
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder


from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton
from magic_filter import F

from func import db_manager


class DateTask():
    task_level = 0
    ftext = ''
    find_task_text = ''
    topic = ''
    task_topic = []
    task_list = []
    task_page = 0
    tpage = 0

    db=db_manager.DBManager()

    # for tn in range(29):
    #     nt = { 'id': tn, 'name': f'{find_task_text}  ‚Ññ{tn}', 'tags': f'tema task','solvedCount': '—Ä–µ—à–µ–Ω–∏–π —à—Ç.', 'rating': '—Ä–µ–π—Ç–∏–Ω–≥/—Å–ª–æ–∂–Ω–æ—Å—Ç—å' }
    #     task_list.append(nt)
    #
    # for tn in range(21):
    #         nt = {'name': f'{ftext} ‚Ññ{tn}', 'id': tn}
    #         task_topic.append(nt)


def update_list_task_topic():
    """–æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    if DateTask.task_level == 2:
        rating1=2600
        rating2=9999
    elif DateTask.task_level == 2:
        rating1=1600
        rating2=2600
    else:
        rating1=0
        rating2=1600

    ftext = DateTask.ftext
    task_topic = []
    qw = f"SELECT distinct problem_tags.tag "\
         "  FROM problem_tags "\
         "      inner join problem "\
         f"	        on problem_tags.id_problem = problem.id_problem "\
         f"where problem.rating>={rating1} and problem.rating<{rating2} and problem_tags.tag like '%{ftext}%'"
    data_qw = DateTask.db.qw(qw)
    for tag in data_qw:
        nt = {'name': tag[0], 'id': 0}
        task_topic.append(nt)

    # for tn in range(21):
    #     nt = {'name': f'{ftext} ‚Ññ{tn}', 'id': tn}
    #     task_topic.append(nt)
    DateTask.task_topic = task_topic

def update_list_task():
    """–æ–±–Ω–æ–≤—è–ª–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
    if DateTask.task_level == 2:
        rating1=2600
        rating2=9999
    elif DateTask.task_level == 2:
        rating1=1600
        rating2=2600
    else:
        rating1=0
        rating2=1600

    find_task_text = DateTask.find_task_text
    topic = DateTask.topic
    # print('topic',topic)
    task_list = []
    qw = f"SELECT distinct problem.id_problem, name, solvedcount , url, rating" \
         "  FROM problem_tags " \
         "      inner join problem " \
         f"	        on problem_tags.id_problem = problem.id_problem " \
         f"where problem.rating>={rating1} and problem.rating<{rating2} and problem_tags.tag = '{topic}' and problem.name like '%{find_task_text}%'"
    # print(qw)
    data_qw = DateTask.db.qw(qw)
    for tn in data_qw:
        # print('tn',tn)
        nt = {'id': tn[0], 'name': tn[1], 'tags': topic, 'solvedCount': tn[2],'url': tn[3],'rating': tn[4]}
        # print(nt)
        task_list.append(nt)


    # for tn in range(3):
    #     nt = {'id': tn, 'name': f'{find_task_text}  ‚Ññ{tn}', 'tags': f'tema task', 'solvedCount': '—Ä–µ—à–µ–Ω–∏–π —à—Ç.',
    #           'rating': '—Ä–µ–π—Ç–∏–Ω–≥/—Å–ª–æ–∂–Ω–æ—Å—Ç—å'}
    #
    #     task_list.append(nt)
    DateTask.task_list = task_list

def get_keyboard_fab():
    builder = InlineKeyboardBuilder()
    builder.button(
        text="ü•â –õ–µ–≥–∫–∏–µ –∑–∞–¥–∞—á–∏ ", callback_data=NumbersCallbackFactory(action="level", value=0, text="–õ–µ–≥–∫–∏–µ –∑–∞–¥–∞—á–∏")
    )
    builder.button(
        text="ü•à –û–±—ã—á–Ω—ã–µ –∑–∞–¥–∞—á–∏", callback_data=NumbersCallbackFactory(action="level", value=1, text="–û–±—ã—á–Ω—ã–µ –∑–∞–¥–∞—á–∏")
    )
    builder.button(
        text="ü•á –°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏", callback_data=NumbersCallbackFactory(action="level", value=2, text="–°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏")
    )

    return builder.as_markup()


def get_keyboard_topic():
    task_topic = DateTask.task_topic
    il=DateTask.tpage

    coiunItem = math.ceil(len(task_topic)/9)-1

    lastpage = il==coiunItem
    # notlastpage = il > 0

    sp_size = 8
    sp_list_task_topic = [task_topic[i:i+sp_size] for i in range(0, len(task_topic), sp_size)]
    if len(sp_list_task_topic) == 0:
        textfind='–ù–µ—Ç —Ç–∞–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –¢—ã–∫ —Å—é–¥–∞ üì• –ø–æ–∏—â–∏–º –µ—â–µ'
    else:
        textfind = "üîé –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"

    builder = InlineKeyboardBuilder()
    for item in  sp_list_task_topic[il]:
        builder.button(
            text=item['name'], callback_data=NumbersCallbackFactory(action="task_topic", value=item['id'], text=item['name'])
        )
    builder.adjust(4)

    builder.row()

    # print('stn',il)

    if not il == 0:
        builder.button(
            text="‚è™ –ù–∞–∑–∞–¥", callback_data=NumbersCallbackFactory(action="navigator", value=-1, text="-1")
        )

    builder.button(
        text=textfind, callback_data=NumbersCallbackFactory(action="find_topic", value=0, text="find")
    )
    if not lastpage:
        builder.button(
            text="‚è© –í–ø–µ—Ä–µ–¥", callback_data=NumbersCallbackFactory(action="navigator", value=1, text="+1")
        )
    builder.adjust(4)
    return builder.as_markup()

def get_keyboard_task():
    # print('topic', topic.text)
    task_list = DateTask.task_list
    il = DateTask.task_page

    coiunItem = math.ceil(len(task_list) / 10) - 1

    lastpage = il == coiunItem
    # notlastpage = il > 0

    sp_size = 10
    sp_list_task = [task_list[i:i + sp_size] for i in range(0, len(task_list), sp_size)]
    if len(sp_list_task) == 0:
        textfind = '–ù–µ—Ç —Ç–∞–∫–∏—Ö –∑–∞–¥–∞—á. –¢—ã–∫ —Å—é–¥–∞ üì• –ø–æ–∏—â–∏–º –µ—â–µ'
    else:
        textfind = "–£—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ üîé. "

    builder = InlineKeyboardBuilder()
    # for item in sp_list_task[il]:
    #     builder.button(
    #         text=item['name'],
    #         callback_data=NumbersCallbackFactory(action="task_topic", value=item['id'], text=item['name'])
    #     )
    builder.adjust(4)

    builder.row()

    # print('stn', il)

    if not il == 0:
        builder.button(
            text="‚è™ –ù–∞–∑–∞–¥", callback_data=NumbersCallbackFactory(action="navigator_task", value=-1, text="-1")
        )

    builder.button(
        text=textfind, callback_data=NumbersCallbackFactory(action="find_task", value=0, text="find")
    )
    builder.button(
        text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞—á", callback_data=NumbersCallbackFactory(action="back_find_topic", value=0, text="find")
    )
    if not lastpage:
        builder.button(
            text="‚è© –í–ø–µ—Ä–µ–¥", callback_data=NumbersCallbackFactory(action="navigator_task", value=1, text="+1")
        )
    builder.adjust(4)
    return builder.as_markup()

def get_task():
    task_list = DateTask.task_list
    il = DateTask.task_page
    sp_size = 10
    sp_list_task = [task_list[i:i + sp_size] for i in range(0, len(task_list), sp_size)]

    # print('len',len(task_list))
    if len(task_list) == 0:
        tt = f'–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {DateTask.topic}-{DateTask.find_task_text}'

    else:
        text_task = []
        for item in sp_list_task[il]:
            text_task.append(f"<b>{item['name']}</b>")
            text_task.append(f"<b>–∫–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {item['tags']}")
            text_task.append(f"<b>—Ä–µ—à–µ–Ω–∏–π:</b> {item['solvedCount']}")
            text_task.append(f"<b>—Å–ª–æ–∂–Ω–æ—Å—Ç—å:</b> {item['rating']}")
            text_task.append(f"<b>URL:</b> <a href='{item['url']}'>—Ç—ã–∫</a>")
            text_task.append('')
        text_task.append('!!!')
        tt = '\n'.join(text_task)

    return tt



class Gen(StatesGroup):
    level = State()
    # findtopic = State()
    topic = State()
    task = State()

class NumbersCallbackFactory(CallbackData, prefix='fabnum'):
    action: str #–∏–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    value: Optional[int] = None #id –≤ –±–∞–∑–µ
    text: str #–∏–º—è

router = Router()

@router.message(Command("start"))
async def start_handler(msg: Message, state: FSMContext):
    """–°—Ç–∞—Ä—Ç"""
    text_rating = """–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∏–∑ –ö–æ–¥–æ–≤—ã—Ö —Å–∏–ª. –Ø –ø–æ–¥–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è –∑–∞–¥–∞—á–∏! –í—ã–±–µ—Ä–µ—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""

    await msg.answer(text_rating, reply_markup=get_keyboard_fab())
    await state.set_state(Gen.level)


@router.callback_query(Gen.level, NumbersCallbackFactory.filter(F.action == "level") )
async def level_selection(clbck: CallbackQuery, callback_data: NumbersCallbackFactory, state:  FSMContext):
    """–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è"""
    DateTask.task_level = callback_data.value
    update_list_task_topic()
    await state.update_data(level=callback_data)
    await state.set_state(Gen.topic)
    # print("easy_tasks", Gen.level)
    await clbck.answer(text=f'–í—ã–±—Ä–∞–Ω —É—Ä–æ–≤–µ–Ω—å: {callback_data.text} ')
    await clbck.message.answer(text=f'–£—Ä–æ–≤–µ–Ω—å: {callback_data.text} ')

    await clbck.message.answer('–ü–æ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–¥–µ–º —Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏', reply_markup=get_keyboard_topic())

# @router.message(
@router.callback_query(Gen.topic, NumbersCallbackFactory.filter(F.action == "navigator") )
async def listing_topic(clbck: CallbackQuery, callback_data: NumbersCallbackFactory, state:  FSMContext):
    """–ª–∏—Å—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π +-8"""
    DateTask.tpage = DateTask.tpage + callback_data.value
    tt=f'  --- —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {DateTask.tpage} --- —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π'
    await clbck.message.answer(text=tt, reply_markup=get_keyboard_topic())

@router.callback_query(Gen.topic, NumbersCallbackFactory.filter(F.action == "find_topic") )
async def text_find_topic(clbck: CallbackQuery,  state:  FSMContext):
    """–ø—Ä–æ—Å–∏–º –≤–≤–æ–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    #–ñ–¥–µ–º –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∫–∞–≥–æ—Ä–∏–∏
    # await state.set_state(Gen.findtopic)
    await clbck.message.answer(text='–ö–∞–∫–∏–µ —Ç–µ–º—ã –∑–∞–¥–∞—á –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —ç—Ç–æ')

# –Ω–µ –±—É–¥—É –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø–æ–∏—Å–∫–∞
# –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ topic —Ä–∞—Å—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –∫–∞–∫ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# @router.message(Gen.findtopic)
@router.message(Gen.topic)
@flags.chat_action("typing")
async def listing_topic(msg: Message, state:  FSMContext):
    """–æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —Å–ª–æ–≤—É –ø–æ–∏—Å–∫–∞, –≤—ã–≤–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞"""
    DateTask.ftext = msg.text
    DateTask.tpage=0;
    update_list_task_topic()

    # await state.update_data(findtopic=DateTask.ftext )

    await msg.answer('–ù–∞—à–ª–∏ —Ç–∞–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ', reply_markup=get_keyboard_topic())

@router.callback_query(Gen.topic, NumbersCallbackFactory.filter(F.action == "task_topic") )
async def select_topic(clbck: CallbackQuery, callback_data: NumbersCallbackFactory, state:  FSMContext):
    """–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await state.update_data(topic=callback_data)
    # –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á–∏
    await state.set_state(Gen.task)

    data_task_topic = await state.get_data()
    topic = data_task_topic['topic']
    DateTask.topic = callback_data.text

    update_list_task()

    # print(get_task())

    tt=f'  --- –∑–∞–¥–∞—á–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {callback_data.text} --- '
    await clbck.message.answer(text=tt, parse_mode="HTML")
    await clbck.message.answer(text=get_task(),parse_mode="HTML")

    tt = f'  --- —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {DateTask.task_page} --- —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –ø–æ {topic.text}'
    await clbck.message.answer(text=tt, reply_markup=get_keyboard_task())

@router.callback_query(Gen.task, NumbersCallbackFactory.filter(F.action == "navigator_task") )
async def navigator_task(clbck: CallbackQuery, callback_data: NumbersCallbackFactory, state:  FSMContext):
    """–ª–∏—Å—Ç–∞–µ–º –∑–∞–¥–∞—á–∏ +-10"""
    data_task_topic = await state.get_data()
    topic=data_task_topic['topic']
    DateTask.task_page = DateTask.task_page + callback_data.value


    await clbck.message.answer(text=get_task(), parse_mode="HTML")

    tt=f'  --- —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {DateTask.task_page} --- —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –ø–æ #{topic.text}#{DateTask.find_task_text}'
    await clbck.message.answer(text=tt, reply_markup=get_keyboard_task())

@router.callback_query(Gen.task, NumbersCallbackFactory.filter(F.action == "back_find_topic") )
async def back_find_topic(clbck: CallbackQuery, callback_data: NumbersCallbackFactory, state:  FSMContext):
    """–Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    DateTask.task_page = 0
    DateTask.tpage = 0
    await state.set_state(Gen.topic)
    await clbck.message.answer('–ü–æ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–¥–µ–º —Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏', reply_markup=get_keyboard_topic())

@router.callback_query(Gen.task, NumbersCallbackFactory.filter(F.action == "find_task") )
async def find_task(clbck: CallbackQuery,  state:  FSMContext):
    """–ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    #–ñ–¥–µ–º –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    # await state.set_state(Gen.findtopic)
    await clbck.message.answer(text='–£—Ç–æ—á–Ω–∏—Ç–µ –∫–∞–∫—É—é –∑–∞–¥–∞—á—É –∏—Å–∫–∞—Ç—å')

# –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ task —Ä–∞—Å—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –∫–∞–∫ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á–∏
@router.message(Gen.task)
@flags.chat_action("typing")
async def listing_topic(msg: Message, state:  FSMContext):
    """–æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ —Å–ª–æ–≤—É –ø–æ–∏—Å–∫–∞, –≤—ã–≤–æ–¥–∏–º —á—Ç–æ –Ω–∞—à–ª–∏ """
    DateTask.find_task_text = msg.text
    DateTask.task_page = 0
    update_list_task()

    data_task_topic = await state.get_data()
    topic = data_task_topic['topic']

    await msg.answer(text=get_task(), parse_mode="HTML")

    tt = f'  --- —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {DateTask.task_page} --- —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –ø–æ #{topic.text} #{DateTask.find_task_text}'

    await msg.answer(tt, reply_markup=get_keyboard_task())

# @router.message(F.text == "–°–ª–æ–∂–Ω–æ—Å—Ç—å")
# @router.message(F.text == "—Å–ª–æ–∂–Ω–æ—Å—Ç—å")
# @router.message(F.text == "–ú–µ–Ω—é")
# async def menu(msg: Message):
#     await msg.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=tg_menu.menu1)
#     print(Gen.level)
#

# import collections
#
# import os
# from pathlib import Path
# from dotenv import load_dotenv
# from aiogram import Bot, Dispatcher, types, executor
# from aiogram.contrib.fsm_storage.memory import MemoryStorage
# from aiogram.dispatcher.filters.state import State, StatesGroup
#
# from telegram import Bot
#
#
#
# BASE_DIR = Path(__file__).resolve().parent.parent
#
# load_dotenv(BASE_DIR / '.env')
#
#
#
#
# class DialogBot:
#     """Bot - –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∑–∞–¥–∞—á—å"""
#
#     def __init__(self):
#         self.bot = Bot(token=os.getenv('BOT_TG_TOKEN'), parse_mode=types.ParseMode.HTML )
#         # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
#         self.storage = MemoryStorage()
#         # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
#         self.dp = Dispatcher(self, storage=self.storage)
#
# class MyStates(StatesGroup):
#     # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è "name"
#     name = State()
#     # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è "age"
#     age = State()
#     # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è "email"
#     email = State()
#
# @dp.message_handler(commands=['start'])
# async def cmd_start(message: types.Message):
#     # –ü—Ä–∏ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã "start" –ø–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "name"
#     await MyStates.name.set()
#     await message.reply("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –∏–º—è.")

